image:
  name: ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/common/build:kaniko-debug
  entrypoint: [""]

variables:
  ECR_BASE_URL: 202949997891.dkr.ecr.ap-northeast-2.amazonaws.com
  AWS_REGION: "ap-northeast-2"
 
stages:
  - package

.template-prepare-ecr:
  script:
    # AWS ECR Login
    - export IS_REPO=`aws ecr describe-repositories --region ${AWS_REGION} --query "repositories[].repositoryName" | grep ${DOCKER_ECR_IMAGE_REPO} | wc -l`
    - >
      if [ "$IS_REPO" == "0" ]; then
        aws ecr create-repository --repository-name ${DOCKER_ECR_IMAGE_REPO} --region ${AWS_REGION} --image-scanning-configuration scanOnPush=true
      fi

.template-docker-build:
  script:    
    ### Check Latest Image
    - export IS_LATEST=`aws ecr describe-images --region ${AWS_REGION} --repository-name ${DOCKER_ECR_IMAGE_REPO} --query imageDetails[].imageTags | grep ${DOCKER_ECR_IMAGE_TAG}-latest | wc -l`
    ### Docker Backup
    - >
     if [ "$IS_LATEST" == "1" ]; then
       echo "Image Backup";
       nerdctl pull ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-latest;
       nerdctl tag ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-latest ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-backup;
       nerdctl push ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-backup;
     fi

    ### Docker Build & Push
    - docker build . -t ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG} -f ${DOCKER_FILE_NAME} ${DOCKER_BUILD_ARGS}
    - nerdctl push ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}
    
    - nerdctl tag ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG} ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-latest
    - nerdctl push ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-latest

.template-kaniko-build:
  script:

    ### Check Latest Image
    - export IS_LATEST=`aws ecr describe-images --region ${AWS_REGION} --repository-name ${DOCKER_ECR_IMAGE_REPO} --query imageDetails[].imageTags | grep ${DOCKER_ECR_IMAGE_TAG}-latest | wc -l`
    ### Docker Backup
    - >
      if [ "$IS_LATEST" == "1" ]; then
        echo "Image Backup";
        nerdctl pull ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-latest;
        nerdctl tag ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-latest ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-backup;
        nerdctl push ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}-backup;
      fi

    ### Kaniko Build
    - mkdir -p /kaniko/.docker
    - echo "{"credsStore":"ecr-login","credHelpers":{"$REGISTRY_URL":"ecr-login"}}" > /kaniko/.docker/config.json

    - /kaniko/executor
      --ignore-path=/var/mail
      --ignore-path=/var/spool/mail
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/${DOCKER_FILE_NAME}"
      --destination "${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${BASE_IMAGE_TAG}"


.template-copy-docker-hub-to-ecr:
  script:
    ### Docker Build & Push
    - aws ecr get-login-password --region ${AWS_REGION} | nerdctl login --username AWS --password-stdin ${ECR_BASE_URL}
    ## - docker build . -t ${_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} --build-arg ENVIRONMENT=${ENVIRONMENT} --build-arg APPLICATION_NAME=${APPLICATION_NAME}
    - nerdctl pull ${DOCKER_BASE_IMAGE_NAME}:${DOCKER_BASE_IMAGE_TAG}
    - nerdctl tag ${DOCKER_BASE_IMAGE_NAME}:${DOCKER_BASE_IMAGE_TAG} ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}

    - nerdctl push ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}

    - nerdctl rmi -f ${DOCKER_BASE_IMAGE_NAME}:${DOCKER_BASE_IMAGE_TAG}
    - nerdctl rmi -f ${ECR_BASE_URL}/${DOCKER_ECR_IMAGE_REPO}:${DOCKER_ECR_IMAGE_TAG}

copy-alpine-latest:
  image:
    name: ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/common/build:kaniko-debug
    entrypoint: [ "" ]
  stage: package
  when: manual
  variables:
    DOCKER_BASE_IMAGE_NAME: alpine
    DOCKER_BASE_IMAGE_TAG: latest
    DOCKER_ECR_IMAGE_REPO: common/dockerhub
    DOCKER_ECR_IMAGE_TAG: alpine-latest
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-copy-docker-hub-to-ecr, script]
  only:
    - main

copy-alpine-3.16.2:
  image:
    name: ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/common/build:kaniko-debug
    entrypoint: [ "" ]
  stage: package
  when: manual
  variables:
    DOCKER_BASE_IMAGE_NAME: alpine
    DOCKER_BASE_IMAGE_TAG: 3.16.2
    DOCKER_ECR_IMAGE_REPO: common/dockerhub
    DOCKER_ECR_IMAGE_TAG: alpine-3.16.2
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-copy-docker-hub-to-ecr, script]
  only:
    - main

copy-tomcat9-jdk11:
  image:
    name: ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/common/build:kaniko-debug
    entrypoint: [ "" ]
  stage: package
  when: manual
  variables:
    DOCKER_BASE_IMAGE_NAME: tomcat
    DOCKER_BASE_IMAGE_TAG: 9.0.83-jdk11-corretto-al2
    DOCKER_ECR_IMAGE_REPO: common/dockerhub
    DOCKER_ECR_IMAGE_TAG: tomcat9-jdk11
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-copy-docker-hub-to-ecr, script]
  only:
    - main


copy-gradle-7.5.1-jdk11:
  image:
    name: ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/common/build:kaniko-debug
    entrypoint: [ "" ]
  stage: package
  when: manual
  variables:
    DOCKER_BASE_IMAGE_NAME: gradle
    DOCKER_BASE_IMAGE_TAG: 8.5.0-jdk11-alpine
    DOCKER_ECR_IMAGE_REPO: common/dockerhub
    DOCKER_ECR_IMAGE_TAG: gradle-jdk11
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-copy-docker-hub-to-ecr, script]
  only:
    - main

docker-docker-build:
  image:
    name: ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/common/build:kaniko-debug
    entrypoint: [ "" ]
  stage: package
  when: manual
  variables:
    DOCKER_FILE_NAME: Dockerfile-docker
    DOCKER_BUILD_ARGS: --build-arg BASE_IMAGE_NAME=${ECR_BASE_URL}/common/build --build-arg BASE_IMAGE_TAG=docker-latest
    DOCKER_ECR_IMAGE_REPO: common/build
    DOCKER_ECR_IMAGE_TAG: docker
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-docker-build, script]
  only:
    - main

helm-docker-build:
  image:
    name: ${ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/common/build:kaniko-debug
    entrypoint: [ "" ]
  stage: package
  when: manual
  variables:
    DOCKER_FILE_NAME: Dockerfile-helm
    DOCKER_BUILD_ARGS: --build-arg BASE_IMAGE_NAME=${ECR_BASE_URL}/common/dockerhub --build-arg BASE_IMAGE_TAG=alpine3.16.2
    DOCKER_ECR_IMAGE_REPO: common/build
    DOCKER_ECR_IMAGE_TAG: helm
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-docker-build, script]
  only:
    - main


kaniko-docker-build:
  stage: package
  when: manual
  variables:
    DOCKER_FILE_NAME: Dockerfile-kaniko
    DOCKER_BUILD_ARGS: --build-arg BASE_IMAGE_NAME=${ECR_BASE_URL}/common/dockerhub --build-arg BASE_IMAGE_TAG=kaniko
    DOCKER_ECR_IMAGE_REPO: common/build
    DOCKER_ECR_IMAGE_TAG: kaniko
  before_script:
    - !reference [.template-prepare-ecr, script]
  script:
    - !reference [.template-kaniko-build, script]
  only:
    - main